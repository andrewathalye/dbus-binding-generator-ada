<!-- Test root node named / -->
<node name="/">
   <!-- Test builtin server interface for OFDP -->
   <interface name="org.freedesktop.DBus.Properties">
      <method name="Set">
         <arg type="s"/>
         <arg type="s"/>
         <arg type="v"/>
      </method>

      <method name="Get">
         <arg type="s"/>
         <arg type="s"/>
         <arg type="v" direction="out"/>
      </method>

      <signal name="PropertiesChanged">
         <arg type="s"/>
         <arg type="a{sv}"/>
      </signal>
   </interface>

   <interface name="tk.zenithseeker.Control">
      <method name="Quit"/>
      <signal name="QuitSignal">
         <arg name="message" type="s"/>
      </signal>
   </interface>

   <interface name="com.example.Duplicate"/>

   <interface name="com.example.Interface">
      <method name="TestEmpty"/>

      <method name="TestBasicTypes">
         <arg type="y"/>
         <arg type="b"/>
         <arg type="n"/>
         <arg type="q"/>
         <arg type="i"/>
         <arg type="u"/>
         <arg type="x"/>
         <arg type="t"/>
         <arg type="d"/>
         <arg type="s"/>
         <arg type="o"/>
         <arg type="g"/>
         <arg type="v"/>
         <arg type="h"/>
      </method>

      <method name="TestBasicTypesOut">
         <arg type="y" direction="out"/>
         <arg type="b" direction="out"/>
         <arg type="n" direction="out"/>
         <arg type="q" direction="out"/>
         <arg type="i" direction="out"/>
         <arg type="u" direction="out"/>
         <arg type="x" direction="out"/>
         <arg type="t" direction="out"/>
         <arg type="d" direction="out"/>
         <arg type="s" direction="out"/>
         <arg type="o" direction="out"/>
         <arg type="g" direction="out"/>
         <arg type="v" direction="out"/>
         <arg type="h" direction="out"/>
      </method>

      <method name="TestComplexTypes">
         <arg name="simple_struct" type="(s)"/>
         <arg name="simple_arr" type="as"/>
         <arg name="int_dict" type="a{iv}"/>
         <arg name="string_dict" type="a{sv}"/>
         <arg name="obj_path_dict" type="a{ov}"/>
         <arg name="signature_dict" type="a{gv}"/>
         <arg name="nested_dict" type="a{sa{sv}}"/>
         <arg name="nested_struct" type="((s))"/>
         <arg name="novel_array" type="a(hhhhh)"/>
      </method>

      <method name="TestComplexTypesOut">
         <arg name="simple_struct" type="(s)" direction="out"/>
         <arg name="simple_arr" type="as" direction="out"/>
         <arg name="int_dict" type="a{iv}" direction="out"/>
         <arg name="string_dict" type="a{sv}" direction="out"/>
         <arg name="obj_path_dict" type="a{ov}" direction="out"/>
         <arg name="signature_dict" type="a{gv}" direction="out"/>
         <arg name="nested_dict" type="a{sa{sv}}" direction="out"/>
         <arg name="nested_struct" type="((s))" direction="out"/>
         <arg name="novel_array" type="a(hhhhh)" direction="out"/>
      </method>

      <!-- Test reserved names -->
      <method name="in">
         <arg name="Interfaces" type="s"/>
      </method>

      <!-- Test properties -->
      <property name="TestPropertyReadOnly" type="s" access="read"/>
      <property name="TestPropertyWriteOnly" type="s" access="write"/>
      <property name="TestProperty" type="s" access="readwrite"/>

      <annotation name="com.example.Annotation" value="Test"/>
   </interface>

   <node name="Interior">
      <interface name="com.example.Interior">
         <method name="Method"/>
      </interface>

      <interface name="com.example.Duplicate"/>
   </node>

   <node name="InteriorWithEmpty">
      <interface name="com.example.InteriorWithEmpty"/>
   </node>

   <!-- Test empty interior nodes and nodes named "/" -->
   <node name="Empty"/>
</node>
