<!-- Test root node named / -->
<node name="/">
   <interface name="com.example.Duplicate"/>

   <interface name="com.example.Control">
      <method name="Ping"/>
      <signal name="Ready"/>
      <method name="Quit"/>
   </interface>

   <interface name="com.example.ClientServer">
      <method name="TestBasicTypes">
         <arg type="y"/>
         <arg type="b"/>
         <arg type="n"/>
         <arg type="q"/>
         <arg type="i"/>
         <arg type="u"/>
         <arg type="x"/>
         <arg type="t"/>
         <arg type="d"/>
         <arg type="s"/>
         <arg type="o"/>
         <arg type="g"/>
         <arg type="v"/>
         <arg type="h"/>
      </method>

      <method name="TestBasicTypesOut">
         <arg type="y" direction="out"/>
         <arg type="b" direction="out"/>
         <arg type="n" direction="out"/>
         <arg type="q" direction="out"/>
         <arg type="i" direction="out"/>
         <arg type="u" direction="out"/>
         <arg type="x" direction="out"/>
         <arg type="t" direction="out"/>
         <arg type="d" direction="out"/>
         <arg type="s" direction="out"/>
         <arg type="o" direction="out"/>
         <arg type="g" direction="out"/>
         <arg type="v" direction="out"/>
         <arg type="h" direction="out"/>
      </method>

      <method name="TestComplexTypes">
         <arg name="simple_struct" type="(s)"/>
         <arg name="simple_arr" type="as"/>
         <arg name="int_dict" type="a{iv}"/>
         <arg name="string_dict" type="a{sv}"/>
         <arg name="obj_path_dict" type="a{ov}"/>
         <arg name="signature_dict" type="a{gv}"/>
         <arg name="nested_dict" type="a{sa{sv}}"/>
         <arg name="nested_struct" type="((s))"/>
         <arg name="novel_array" type="a(hhhhh)"/>
      </method>

      <method name="TestComplexTypesOut">
         <arg name="simple_struct" type="(s)" direction="out"/>
         <arg name="simple_arr" type="as" direction="out"/>
         <arg name="int_dict" type="a{iv}" direction="out"/>
         <arg name="string_dict" type="a{sv}" direction="out"/>
         <arg name="obj_path_dict" type="a{ov}" direction="out"/>
         <arg name="signature_dict" type="a{gv}" direction="out"/>
         <arg name="nested_dict" type="a{sa{sv}}" direction="out"/>
         <arg name="nested_struct" type="((s))" direction="out"/>
         <arg name="novel_array" type="a(hhhhh)" direction="out"/>
      </method>

      <!-- Test reserved names -->
      <method name="in">
         <arg name="Interfaces" type="s"/>
      </method>
   </interface>

   <!-- Test properties -->
   <node name="Properties">
      <interface name="org.freedesktop.DBus.Properties">
         <method name="Get">
            <arg name="interface_name" type="s"/>
            <arg name="property_name" type="s"/>
            <arg name="value" type="v" direction="out"/>
         </method>

         <method name="Set">
            <arg name="interface_name" type="s"/>
            <arg name="property_name" type="s"/>
            <arg name="value" type="v"/>
         </method>

         <method name="GetAll">
            <arg name="interface_name" type="s"/>
            <arg name="properties" type="a{sv}" direction="out"/>
         </method>
      
         <signal name="PropertiesChanged">
            <arg name="interface_name" type="s"/>
            <arg name="changed_properties" type="a{sv}"/>
            <arg name="invalidated_properties" type="as"/>
         </signal>
      </interface>

      <interface name="com.example.Control">
         <method name="Ping"/>
         <signal name="Ready"/>
         <method name="Quit"/>
      </interface>

      <interface name="com.example.Properties">
         <property name="TestPropertyReadOnly" type="s" access="read"/>
         <property name="TestPropertyWriteOnly" type="s" access="write"/>
         <property name="TestProperty" type="s" access="readwrite"/>
      </interface>
   </node>
   
   <!-- Test annotations -->
   <node name="Annotations">
      <interface name="org.freedesktop.DBus.Properties">
         <method name="Get">
            <arg name="interface_name" type="s"/>
            <arg name="property_name" type="s"/>
            <arg name="value" type="v" direction="out"/>
         </method>

         <method name="Set">
            <arg name="interface_name" type="s"/>
            <arg name="property_name" type="s"/>
            <arg name="value" type="v"/>
         </method>

         <method name="GetAll">
            <arg name="interface_name" type="s"/>
            <arg name="properties" type="a{sv}" direction="out"/>
         </method>
      
         <signal name="PropertiesChanged">
            <arg name="interface_name" type="s"/>
            <arg name="changed_properties" type="a{sv}"/>
            <arg name="invalidated_properties" type="as"/>
         </signal>
      </interface>

      <interface name="com.example.Control">
         <method name="Ping"/>
         <signal name="Ready"/>
         <method name="Quit"/>
      </interface>

      <interface name="com.example.Annotations">
         <method name="Method">
            <annotation name="org.freedesktop.DBus.Deprecated" value="true"/>
            <annotation name="org.freedesktop.DBus.Method.NoReply" value="true"/>
         </method>

         <signal name="Signal">
            <annotation name="org.freedesktop.DBus.Deprecated" value="true"/>
         </signal>

         <property name="Deprecated" access="readwrite" type="s">
            <annotation name="org.freedesktop.DBus.Deprecated" value="true"/>
         </property>

         <property name="True" access="readwrite" type="s">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="true"/>
         </property>

         <property name="Invalidates" access="readwrite" type="s">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="invalidates"/>
         </property>

         <!-- Technically invalid, but annotations are optional so not against spec -->
         <property name="Const" access="readwrite" type="s">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="const"/>
         </property>

         <property name="False" access="readwrite" type="s">
            <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
         </property>
      </interface>

      <interface name="com.example.Annotations.Deprecated">
         <annotation name="org.freedesktop.DBus.Deprecated" value="true"/>
      </interface>
   </node>

   <!-- Mixed-mode (signal handling) tests -->
   <node name="Mixed">
      <interface name="com.example.Mixed">
         <signal name="Signal1">
            <arg type="s"/>
         </signal>

         <signal name="Signal2"/>
      </interface>
   </node>
   
   <!-- Structural tests -->
   <node name="Interior">
      <interface name="com.example.Interior">
         <method name="Method"/>
      </interface>

      <interface name="com.example.Duplicate"/>

      <node name="InteriorWithEmpty">
         <interface name="com.example.InteriorWithEmpty"/>
      </node>

      <node name="Empty"/>
   </node>
</node>
